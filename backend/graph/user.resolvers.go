package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"server/pkg/model"

	"gorm.io/gorm"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	db, ok := ctx.Value("DB").(*gorm.DB)
	if !ok {
		return nil, fmt.Errorf("failed to get database instance from context")
	}

	user := model.UserModel{
		Name:  input.Name,
		Email: input.Email,
	}
	if err := db.Create(&user).Error; err != nil {
		return nil, err
	}
	return &model.User{
		ID:    string(user.ID),
		Name:  user.Name,
		Email: user.Email,
	}, nil
	// return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	db, ok := ctx.Value("DB").(*gorm.DB)
	if !ok {
		return nil, fmt.Errorf("failed to get database instance from context")
	}

	var usersFromDb []*model.UserModel
	if err := db.Find(&usersFromDb).Error; err != nil {
		return nil, err
	}

	var users []*model.User
	for _, userModel := range usersFromDb {
		user := &model.User{
			ID:    fmt.Sprint(userModel.ID),
			Name:  userModel.Name,
			Email: userModel.Email,
		}
		users = append(users, user)
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
